plugins {
    id 'java'
    id 'java-library'
    id 'maven-publish'
    id 'maven'
    id 'signing'
    id 'org.unbroken-dome.test-sets' version '3.0.1'
    id 'jacoco'
}

def isRelease = System.getenv('IS_RELEASE') == 'YES'

if (isRelease) {
    println("THIS IS A RELEASE BUILD! Artifacts will be staged on maven central.")
}

group = 'net.twasi'
version = rootProject.file('VERSION').text.trim() + (isRelease ? '' : '-SNAPSHOT')
archivesBaseName = rootProject.name

java.sourceCompatibility = JavaVersion.VERSION_1_8

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    implementation 'org.eclipse.jetty.websocket:websocket-client:9.4.42.v20210604'
    api 'com.google.code.gson:gson:2.8.6'
    implementation 'org.slf4j:slf4j-api:1.7.31'
    implementation 'org.slf4j:slf4j-simple:1.7.31'
    compileOnly 'org.projectlombok:lombok:1.18.20'
    annotationProcessor 'org.projectlombok:lombok:1.18.20'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.0.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.0.0'
    testImplementation 'org.assertj:assertj-core:3.18.1'
    testImplementation 'org.skyscreamer:jsonassert:1.5.0'
    testCompileOnly 'org.projectlombok:lombok:1.18.20'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.20'
    testImplementation "org.mockito:mockito-core:3.+"
}

java {
    withSourcesJar()
    // withJavadocJar()
}

testSets {
    // Covers cases where OBS instance is not required
    integrationTest {
        dirName = "integrationTest"
    }

    // Covers cases where OBS is required, and authentication is disabled. Could be
    // run against the freely-available Linux distro of OBS in a container.
    endToEndUnsecuredTest {
        dirName = "endToEndUnsecuredTest"
    }
    // Covers cases where OBS is required, and authentication is enabled. Could be
    // run against the freely-available Linux distro of OBS in a container.
    endToEndSecuredTest {
        dirName = "endToEndSecuredTest"
    }

    // Covers cases where OBS is installed on Windows, specific scene collection is installed,
    // and VLC media player is installed. Cannot be automated; run manually on your PC.
    endToEndManualTest {
        dirName = "endToEndManualTest"
    }
}

test {
    useJUnitPlatform()
}

integrationTest {
    useJUnitPlatform()
}

endToEndUnsecuredTest {
    useJUnitPlatform()
}

endToEndSecuredTest {
    useJUnitPlatform()
}

endToEndManualTest {
    useJUnitPlatform()
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

artifacts {
    archives javadocJar, sourcesJar
}

signing {
    def signingKey = System.getenv('PGP_KEY') ? System.getenv('PGP_KEY').replace("\\n", "\n") : ''
    def signingPassword = System.getenv('PGP_PSW')

    useInMemoryPgpKeys(signingKey, signingPassword)

    if (signingKey != '') {
        sign configurations.archives
    }
}

def ossrhUsername = System.getenv('OSSRH_USERNAME')
def ossrhPassword = System.getenv('OSSRH_PASSWORD')

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            pom.project {
                name 'websocket-obs-java'
                packaging 'jar'
                // optionally artifactId can be defined here
                description 'Library to connect to the OBS WebSocket interface.'
                url 'https://github.com/Twasi/obs-websocket-java'

                scm {
                    connection 'scm:git:git://github.com/Twasi/obs-websocket-java.git'
                    developerConnection 'scm:git:git@github.com:Twasi/obs-websocket-java.git'
                    url 'https://github.com/Twasi/obs-websocket-java'
                }

                licenses {
                    license {
                        name 'MIT'
                        url 'https://opensource.org/licenses/MIT'
                    }
                }

                developers {
                    developer {
                        name 'Lars BÃ¤rtschi'
                        email 'lars@twasi.net'
                    }
                    developer {
                        name 'Merlin Westphal'
                        email 'merlin@twasi.net'
                    }
                }
            }
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}
